apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  labels:
    app: user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        # Labels for Promtail log collection
        logging: "enabled"
      annotations:
        # Prometheus scraping annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      # Init container for automatic database migrations
      initContainers:
      - name: migrate
        image: user-service:latest
        command: ["/usr/local/bin/migrate"]
        args: ["-path", "/migrations", "-database", "$(USER_SERVICE_DB_URL)", "up"]
        env:
        - name: USER_SERVICE_DB_URL
          valueFrom:
            secretKeyRef:
              name: user-service-secrets
              key: db_url
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      containers:
      - name: user-service
        image: user-service:latest
        workingDir: /
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: USER_SERVICE_DB_URL
          valueFrom:
            secretKeyRef:
              name: user-service-secrets
              key: db_url
        - name: USER_SERVICE_JWT_ACCESSSECRET
          valueFrom:
            secretKeyRef:
              name: user-service-secrets
              key: jwt_access_secret
        - name: USER_SERVICE_JWT_REFRESHSECRET
          valueFrom:
            secretKeyRef:
              name: user-service-secrets
              key: jwt_refresh_secret
        # Jaeger tracing configuration
        - name: JAEGER_ENDPOINT
          value: "http://jaeger.observability.svc.cluster.local:14268/api/traces"
        - name: OTEL_EXPORTER_JAEGER_ENDPOINT
          value: "http://jaeger.observability.svc.cluster.local:14268/api/traces"
        - name: OTEL_SERVICE_NAME
          value: "user-service"
        # Structured logging for Loki
        - name: LOG_FORMAT
          value: "json"
        - name: LOG_LEVEL
          value: "info"
        volumeMounts:
        - name: config
          mountPath: /configs
        envFrom:
        - configMapRef:
            name: user-service-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        # Health checks for better observability
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
        - name: config
          configMap:
            name: user-service-config
