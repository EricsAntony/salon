openapi: 3.1.0
info:
  title: User Service API
  version: 1.0.0
servers:
  - url: http://localhost:8081
paths:
  /otp/request:
    post:
      summary: Request OTP for a phone number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_number:
                  type: string
              required: [phone_number]
      responses:
        '200': { description: OTP sent }
        '400': { description: Invalid input }
  /user/register:
    post:
      summary: Register a new user using OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_number: { type: string }
                name: { type: string }
                gender: { type: string, enum: [male, female, other] }
                email: { type: string, nullable: true }
                location: { type: string, nullable: true }
                otp: { type: string }
              required: [phone_number, name, gender, otp]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  access_token: { type: string }
        '400': { description: Bad request }
  /user/authenticate:
    post:
      summary: Authenticate existing user using OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_number: { type: string }
                otp: { type: string }
              required: [phone_number, otp]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
        '401': { description: Unauthorized }
  /auth/refresh:
    post:
      summary: Refresh access token using refresh token cookie
      parameters:
        - in: header
          name: X-CSRF-Token
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
        '401': { description: Unauthorized }
        '403': { description: CSRF failed }
      security: []
  /auth/revoke:
    post:
      summary: Revoke all refresh tokens (logout)
      responses:
        '204': { description: No Content }
        '401': { description: Unauthorized }
      security:
        - bearerAuth: []
  /user/{id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404': { description: Not found }
      security:
        - bearerAuth: []
  /users/{id}:
    put:
      summary: Update user profile (self)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                gender: { type: string, enum: [male, female, other] }
                email: { type: string }
                location: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '400': { description: Bad request }
        '403': { description: Forbidden }
        '401': { description: Unauthorized }
      security:
        - bearerAuth: []
    delete:
      summary: Delete user (self)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
        '403': { description: Forbidden }
        '401': { description: Unauthorized }
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        phone_number: { type: string }
        name: { type: string }
        gender: { type: string, enum: [male, female, other] }
        email: { type: string, nullable: true }
        location: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
