# Multi-stage build for user-service
FROM golang:1.23-alpine AS builder

# Install migrate binary and security updates
RUN apk update && apk add --no-cache git ca-certificates tzdata && \
    go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.17.1

# Set working directory
WORKDIR /app

# Copy the entire salon project (including salon-shared)
COPY . .

# Build the user-service
WORKDIR /app/user-service
RUN go mod tidy && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o user-service ./cmd

# Final stage - minimal runtime image with security updates
FROM alpine:3.19

# Install runtime dependencies and security updates
RUN apk update && apk add --no-cache ca-certificates postgresql-client tzdata && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN adduser -D -s /bin/sh -u 10001 appuser

WORKDIR /app

# Copy binaries from builder stage
COPY --from=builder /app/user-service/user-service .
COPY --from=builder /go/bin/migrate .

# Copy configs and migrations
COPY --from=builder /app/user-service/configs/ ./configs/
COPY --from=builder /app/user-service/migrations/ ./migrations/

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Run migrations and start service
ENTRYPOINT ["/bin/sh", "-c", "./migrate -path ./migrations -database \"$USER_SERVICE_DB_URL\" up && exec ./user-service"]
