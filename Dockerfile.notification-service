# Build stage
FROM golang:1.21-alpine3.19 AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files for all services (for shared dependencies)
COPY go.work go.work.sum ./
COPY salon-shared/go.mod salon-shared/go.sum ./salon-shared/
COPY notification-service/go.mod notification-service/go.sum ./notification-service/

# Download dependencies
RUN cd notification-service && go mod download

# Copy shared module
COPY salon-shared/ ./salon-shared/

# Copy notification service source
COPY notification-service/ ./notification-service/

# Build the application
WORKDIR /app/notification-service
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd

# Final stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata wget

# Create non-root user
RUN adduser -D -s /bin/sh -u 10001 appuser

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/notification-service/main .

# Copy configuration files
COPY --from=builder /app/notification-service/configs ./configs

# Change ownership to appuser
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8084

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8084/health || exit 1

# Run the application
CMD ["./main"]
